// 单调栈（Monotone Stack）：一种特殊的栈。在栈的「先进后出」规则基础上，要求「从 栈顶
//  到 栈底 的元素是单调递增（或者单调递减）」。其中满足从栈顶到栈底的元素是单调递增的栈
//  ，叫做「单调递增栈」。满足从栈顶到栈底的元素是单调递减的栈，叫做「单调递减栈」。

// 单调栈常用于寻找序列中某些元素的相邻元素，如左侧第一个更大/更小的元素等。文章还提供了具体的
// 编程模板和实际问题的解题思路，如下一个更大元素问题和每日温度问题。

// 单调递增栈：只有比栈顶元素小的元素才能直接进栈，否则需要先将栈中比当前元素小的元素出栈，
// 再将当前元素入栈。这样就保证了：栈中保留的都是比当前入栈元素大的值，并且从栈顶到栈底的元素
// 值是单调递增的。

// 单调递减栈：只有比栈顶元素大的元素才能直接进栈，否则需要先将栈中比当前元素大的元素出栈，再将当
// 前元素入栈.这样就保证了：栈中保留的都是比当前入栈元素小的值，并且从栈顶到栈底的元素值是单调递
// 减的。

// 2.1 寻找左侧第一个比当前元素大的元素
// 从左到右遍历元素，构造单调递增栈（从栈顶到栈底递增）：
// 一个元素左侧第一个比它大的元素就是将其「插入单调递增栈」时的栈顶元素。
// 如果插入时的栈为空，则说明左侧不存在比当前元素大的元素。

// 2.2 寻找左侧第一个比当前元素小的元素
// 从左到右遍历元素，构造单调递减栈（从栈顶到栈底递减）：
// 一个元素左侧第一个比它小的元素就是将其「插入单调递减栈」时的栈顶元素。
// 如果插入时的栈为空，则说明左侧不存在比当前元素小的元素。

// 2.3 寻找右侧第一个比当前元素大的元素
// 从左到右遍历元素，构造单调递增栈（从栈顶到栈底递增）：
// 一个元素右侧第一个比它大的元素就是将其「弹出单调递增栈」时即将插入的元素。
// 如果该元素没有被弹出栈，则说明右侧不存在比当前元素大的元素。
// 从右到左遍历元素，构造单调递增栈（从栈顶到栈底递增）：
// 一个元素右侧第一个比它大的元素就是将其「插入单调递增栈」时的栈顶元素。
// 如果插入时的栈为空，则说明右侧不存在比当前元素大的元素。

// 2.4 寻找右侧第一个比当前元素小的元素
// 从左到右遍历元素，构造单调递减栈（从栈顶到栈底递减）：
// 一个元素右侧第一个比它小的元素就是将其「弹出单调递减栈」时即将插入的元素。
// 如果该元素没有被弹出栈，则说明右侧不存在比当前元素小的元素。
// 从右到左遍历元素，构造单调递减栈（从栈顶到栈底递减）：
// 一个元素右侧第一个比它小的元素就是将其「插入单调递减栈」时的栈顶元素。
// 如果插入时的栈为空，则说明右侧不存在比当前元素小的元素。

// 上边的分类解法有点绕口，可以简单记为以下条规则：
// 无论哪种题型，都建议从左到右遍历元素。
// 查找 「比当前元素大的元素」 就用 单调递增栈，查找 「比当前元素小的元素」 就用 单调递减栈。
// 从 「左侧」 查找就看 「插入栈」 时的栈顶元素，从 「右侧」 查找就看 「弹出栈」 时即将插入的元素。